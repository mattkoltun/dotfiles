# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt


# Import only React
snippet ri1 "import react #1" b
import React from 'react';
endsnippet

# Import both React and hooks
snippet ri2 "import react #2" b
import React, {useEffect, useState} from "react";
import PropTypes from 'prop-types';
endsnippet

# Proptypes for Presentational component
snippet rpt
${1}.propTypes = {
${2}: PropTypes.${0},
};
endsnippet

snippet pt "PropType " b
	${1}: PropTypes.${2},
endsnippet

# Default props for Presentational component
snippet rdp
${1}.defaultProps = {
${2}: ${0},
};
endsnippet

# Functional components
snippet rtfunc "React function component template" b
import React, { useState } from "react";
import PropTypes from "prop-types";

const ${1:Name} = (${2}) => {
	return (
		<>
			${4:<p>Body</p>}
		</>
		)
};

${1:Name}.propTypes = {
	${3}
}

export default ${1:Name};
endsnippet

# context template
snippet rtcont "React context template" b
import React, { createContext, useContext } from "react";
import PropTypes from "prop-types";

export const ${1:Name}Context = createContext(null);
export const use${1:Name} = () => useContext(${1:Name}Context);

const ${1:Name}Provider = ({children}) => {
	const ${2:name} = {

	};
	return (
		<${1:Name}Context.Provider value={${2:name}}>{children}</${1:Name}Context.Provider>
	);
};

${1:Name}Provider.propTypes = {
	children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
};

export default ${1:Name}Provider;

endsnippet

snippet msty "React makeStyles" b
${3}import { makeStyles, createStyles } from "@material-ui/core/styles";
const useStyles = makeStyles((theme) => createStyles({
	${1:root} : {
		${2}
	}
}));
endsnippet

snippet usty "React useStyles" b
const classes = useStyles();
endsnippet

snippet rfunc "React function component" b
const ${1:name} = (${2:props}) => {
	return (
		<>
			${3:<p>body</p>}
		</>
	)
};
endsnippet

snippet rred "React reducer" b
const reducer = (state, action) => {
  switch (action.type) {
    default: 
      throw "Action type " + action.type + " not recognized.";
  }
}

const initialState = {

}

const [state, dispatch] = React.useReducer(reducer, initialState)
endsnippet

# React Hooks

snippet reff "React useEffect" b
React.useEffect(() => {
	${2}
}, [${1}]);
endsnippet

snippet rstt "React useState" b
const [${1}, ${2}] = React.useState(${3});
endsnippet
